# Whoeps, 14th Nov 2023

# This is a snakefile to go from: 
    #   1) A collection of folders containing samplewise bam files from Strandseq
    #   2) a sample name
    #   3) Reference coordinates
# To:
    # An output plot
    # Output data

configfile: "config/config.yaml"

samplefile = "config/samples.tsv"
regionfile = "config/regions.tsv"

# Read regions file and process it into a list of dictionaries
def read_regions(regions_file):
    regions = []
    with open(regions_file, 'r') as file:
        # Skip the header if there is one, otherwise remove this line
        next(file)
        for line in file:
            parts = line.strip().split('\t')
            # Assuming the file has three columns: chr, start, end
            regions.append({'chr': parts[0], 'start': parts[1], 'end': parts[2]})
    return regions



samples_raw = open(samplefile)
SAMPLES = samples_raw.read().split("\n")[:-1]

REGIONS = read_regions(regionfile)


rule all: 
    input:
        png = expand("res/{sample}/pipe_plots/{sample}_{chr}_{start}_{end}.png",
               sample=SAMPLES,
               chr=[r['chr'] for r in REGIONS],
               start=[r['start'] for r in REGIONS],
               end=[r['end'] for r in REGIONS]),
        bedpe = expand("res/{sample}/pipe_data/{sample}_{chr}_{start}_{end}.bedpe",
               sample=SAMPLES,
               chr=[r['chr'] for r in REGIONS],
               start=[r['start'] for r in REGIONS],
               end=[r['end'] for r in REGIONS])



rule get_plot_and_bedpe:
    input:
        sample_concat_orientationflip = "res/{sample}/sample_concat_orientationflip_{chr}_{start}_{end}.bed"
    output:
        png = "res/{sample}/pipe_plots/{sample}_{chr}_{start}_{end}.png",
        bedpe = "res/{sample}/pipe_data/{sample}_{chr}_{start}_{end}.bedpe"
    params:
        binsize = config["binsize"],
    shell:
        """
        Rscript workflow/scripts/CN_plot_sum.R \
            {input.sample_concat_orientationflip} \
            {output.png} \
            {output.bedpe} \
            {wildcards.chr} \
            {wildcards.start} \
            {wildcards.end} \
            {params.binsize}
        """

# For this rule, we need to externally provide regions - chr, start, end, and then put them here as arguments into the shell command. 
rule get_sample_concat_orientationflip:
    input:
        sample_concat = "res/{sample}/sample_concat.bed.gz"
    output:
        sample_concat_orientationflip = "res/{sample}/sample_concat_orientationflip_{chr}_{start}_{end}.bed"
    shell: 
        """
        python workflow/scripts/bedfile_orientation_processor_v2.py \
            {input.sample_concat} \
            {output.sample_concat_orientationflip} \
            {wildcards.chr} \
            {wildcards.start} \
            {wildcards.end}
        """

rule get_sample_concat:
    input:
        done_marker = "res/{sample}/done.txt"
    output:
        sample_concat = "res/{sample}/sample_concat.bed.gz"
    shell:
        """
        python workflow/scripts/prep_for_ucsc.py \
                    res/{wildcards.sample}/browserfiles \
                    {output.sample_concat} 
        """

rule run_breakpointr:
    input:
    output:
        done_marker = "res/{sample}/done.txt"
    params:
        chromosomes =  config['chromosomes'],
        bamdir = config['bamdir'],
        outfolder = 'res/{sample}'
    shell:
        """
        Rscript workflow/scripts/run_breakpointR.R \
            {params.bamdir}/{wildcards.sample}/selected \
            {params.outfolder} \
            {params.chromosomes} 
        touch {output.done_marker}
        """